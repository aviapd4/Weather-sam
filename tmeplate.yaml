AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Explicitly define DynamoDB, API Gateway, and Lambda (Python 3.10).

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WeatherData
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                Resource: !GetAtt DynamoDBTable.Arn

  MyLambdaFunctionCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: add_function.create_handler
      Runtime: python3.9
      Role: !GetAtt MyLambdaExecutionRole.Arn

  MyLambdaFunctionDelete:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: delete_function.delete_handler
      Runtime: python3.9
      Role: !GetAtt MyLambdaExecutionRole.Arn

  MyApiCreate:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "API for Lambda Create"
        paths:
          /resource/create:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunctionCreate.Arn}/invocations
              responses: {}
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"


  MyApiDelete:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "API for Lambda Delete"
        paths:
          /resource/delete:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunctionDelete.Arn}/invocations
              responses: {}
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"

Outputs:
  EndpointURLCreate:
    Description: "API Gateway endpoint URL for Create Prod stage"
    Value: !Sub "https://${MyApiCreate}.execute-api.${AWS::Region}.amazonaws.com/prod/resource/create"

  EndpointURLDelete:
    Description: "API Gateway endpoint URL for Delete Prod stage"
    Value: !Sub "https://${MyApiDelete}.execute-api.${AWS::Region}.amazonaws.com/prod/resource/delete"
